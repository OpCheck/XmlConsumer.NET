//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from XmlConsumer.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OpCheck.XmlConsumer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class XmlConsumerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, STRING_LITERAL=19, OBJECT_MEMBER_IDENTIFIER=20, WHITESPACE=21, 
		LINE_COMMENT=22;
	public const int
		RULE_xmlConsumerExpressionFile = 0, RULE_xmlConsumerScript = 1, RULE_optionsTuple = 2, 
		RULE_optionsList = 3, RULE_option = 4, RULE_stringLiteralsList = 5, RULE_objectMappingBlock = 6, 
		RULE_mappingList = 7, RULE_simpleMapping = 8, RULE_complexMapping = 9;
	public static readonly string[] ruleNames = {
		"xmlConsumerExpressionFile", "xmlConsumerScript", "optionsTuple", "optionsList", 
		"option", "stringLiteralsList", "objectMappingBlock", "mappingList", "simpleMapping", 
		"complexMapping"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "';'", "'ExpressionType'", "':'", "'Encoding'", "'Prefix'", 
		"','", "'Binding'", "'Bindings'", "'ParseMethod'", "'AutoParseMode'", 
		"'AutoCreateMode'", "'NullObjectTreatmentMode'", "'Collectivity'", "'{'", 
		"'}'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "STRING_LITERAL", "OBJECT_MEMBER_IDENTIFIER", 
		"WHITESPACE", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XmlConsumer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static XmlConsumerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public XmlConsumerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public XmlConsumerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class XmlConsumerExpressionFileContext : ParserRuleContext {
		public XmlConsumerScriptContext xmlConsumerScript() {
			return GetRuleContext<XmlConsumerScriptContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(XmlConsumerParser.Eof, 0); }
		public XmlConsumerExpressionFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlConsumerExpressionFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterXmlConsumerExpressionFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitXmlConsumerExpressionFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlConsumerExpressionFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlConsumerExpressionFileContext xmlConsumerExpressionFile() {
		XmlConsumerExpressionFileContext _localctx = new XmlConsumerExpressionFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_xmlConsumerExpressionFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; xmlConsumerScript();
			State = 21; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlConsumerScriptContext : ParserRuleContext {
		public ObjectMappingBlockContext objectMappingBlock() {
			return GetRuleContext<ObjectMappingBlockContext>(0);
		}
		public OptionsTupleContext optionsTuple() {
			return GetRuleContext<OptionsTupleContext>(0);
		}
		public XmlConsumerScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlConsumerScript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterXmlConsumerScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitXmlConsumerScript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlConsumerScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XmlConsumerScriptContext xmlConsumerScript() {
		XmlConsumerScriptContext _localctx = new XmlConsumerScriptContext(Context, State);
		EnterRule(_localctx, 2, RULE_xmlConsumerScript);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 23; optionsTuple();
				}
			}

			State = 26; objectMappingBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsTupleContext : ParserRuleContext {
		public OptionsListContext optionsList() {
			return GetRuleContext<OptionsListContext>(0);
		}
		public OptionsTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsTuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterOptionsTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitOptionsTuple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsTupleContext optionsTuple() {
		OptionsTupleContext _localctx = new OptionsTupleContext(Context, State);
		EnterRule(_localctx, 4, RULE_optionsTuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(T__0);
			State = 29; optionsList();
			State = 30; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsListContext : ParserRuleContext {
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public OptionsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterOptionsList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitOptionsList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsListContext optionsList() {
		OptionsListContext _localctx = new OptionsListContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionsList);
		int _la;
		try {
			int _alt;
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__5:
			case T__6:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32; option();
				State = 37;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 33; Match(T__2);
						State = 34; option();
						}
						} 
					}
					State = 39;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 40; Match(T__2);
					}
				}

				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
	 
		public OptionContext() { }
		public virtual void CopyFrom(OptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionTypeOptionContext : OptionContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(XmlConsumerParser.STRING_LITERAL, 0); }
		public ExpressionTypeOptionContext(OptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterExpressionTypeOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitExpressionTypeOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionTypeOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BindingsOptionContext : OptionContext {
		public StringLiteralsListContext stringLiteralsList() {
			return GetRuleContext<StringLiteralsListContext>(0);
		}
		public BindingsOptionContext(OptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterBindingsOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitBindingsOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingsOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollectivityOptionContext : OptionContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(XmlConsumerParser.STRING_LITERAL, 0); }
		public CollectivityOptionContext(OptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterCollectivityOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitCollectivityOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectivityOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AutoParseModeOptionContext : OptionContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(XmlConsumerParser.STRING_LITERAL, 0); }
		public AutoParseModeOptionContext(OptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterAutoParseModeOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitAutoParseModeOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoParseModeOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AutoCreateModeOptionContext : OptionContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(XmlConsumerParser.STRING_LITERAL, 0); }
		public AutoCreateModeOptionContext(OptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterAutoCreateModeOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitAutoCreateModeOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoCreateModeOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BindingOptionContext : OptionContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(XmlConsumerParser.STRING_LITERAL, 0); }
		public BindingOptionContext(OptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterBindingOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitBindingOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixOptionContext : OptionContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(XmlConsumerParser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(XmlConsumerParser.STRING_LITERAL, i);
		}
		public PrefixOptionContext(OptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterPrefixOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitPrefixOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParseMethodOptionContext : OptionContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(XmlConsumerParser.STRING_LITERAL, 0); }
		public ParseMethodOptionContext(OptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterParseMethodOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitParseMethodOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParseMethodOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullObjectTreatmentModeOptionContext : OptionContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(XmlConsumerParser.STRING_LITERAL, 0); }
		public NullObjectTreatmentModeOptionContext(OptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterNullObjectTreatmentModeOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitNullObjectTreatmentModeOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullObjectTreatmentModeOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EncodingOptionContext : OptionContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(XmlConsumerParser.STRING_LITERAL, 0); }
		public EncodingOptionContext(OptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterEncodingOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitEncodingOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				_localctx = new ExpressionTypeOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; Match(T__3);
				State = 47; Match(T__4);
				State = 48; Match(STRING_LITERAL);
				}
				break;
			case T__5:
				_localctx = new EncodingOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; Match(T__5);
				State = 50; Match(T__4);
				State = 51; Match(STRING_LITERAL);
				}
				break;
			case T__6:
				_localctx = new PrefixOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; Match(T__6);
				State = 53; Match(T__4);
				State = 54; Match(STRING_LITERAL);
				State = 55; Match(T__7);
				State = 56; Match(STRING_LITERAL);
				}
				break;
			case T__8:
				_localctx = new BindingOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 57; Match(T__8);
				State = 58; Match(T__4);
				State = 59; Match(STRING_LITERAL);
				}
				break;
			case T__9:
				_localctx = new BindingsOptionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 60; Match(T__9);
				State = 61; Match(T__4);
				State = 62; stringLiteralsList();
				}
				break;
			case T__10:
				_localctx = new ParseMethodOptionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 63; Match(T__10);
				State = 64; Match(T__4);
				State = 65; Match(STRING_LITERAL);
				}
				break;
			case T__11:
				_localctx = new AutoParseModeOptionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 66; Match(T__11);
				State = 67; Match(T__4);
				State = 68; Match(STRING_LITERAL);
				}
				break;
			case T__12:
				_localctx = new AutoCreateModeOptionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 69; Match(T__12);
				State = 70; Match(T__4);
				State = 71; Match(STRING_LITERAL);
				}
				break;
			case T__13:
				_localctx = new NullObjectTreatmentModeOptionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 72; Match(T__13);
				State = 73; Match(T__4);
				State = 74; Match(STRING_LITERAL);
				}
				break;
			case T__14:
				_localctx = new CollectivityOptionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 75; Match(T__14);
				State = 76; Match(T__4);
				State = 77; Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralsListContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(XmlConsumerParser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(XmlConsumerParser.STRING_LITERAL, i);
		}
		public StringLiteralsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteralsList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterStringLiteralsList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitStringLiteralsList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralsListContext stringLiteralsList() {
		StringLiteralsListContext _localctx = new StringLiteralsListContext(Context, State);
		EnterRule(_localctx, 10, RULE_stringLiteralsList);
		int _la;
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(STRING_LITERAL);
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 81; Match(T__7);
					State = 82; Match(STRING_LITERAL);
					}
					}
					State = 87;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__1:
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectMappingBlockContext : ParserRuleContext {
		public MappingListContext mappingList() {
			return GetRuleContext<MappingListContext>(0);
		}
		public ObjectMappingBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectMappingBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterObjectMappingBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitObjectMappingBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectMappingBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectMappingBlockContext objectMappingBlock() {
		ObjectMappingBlockContext _localctx = new ObjectMappingBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_objectMappingBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(T__15);
			State = 92; mappingList();
			State = 93; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MappingListContext : ParserRuleContext {
		public ComplexMappingContext[] complexMapping() {
			return GetRuleContexts<ComplexMappingContext>();
		}
		public ComplexMappingContext complexMapping(int i) {
			return GetRuleContext<ComplexMappingContext>(i);
		}
		public SimpleMappingContext[] simpleMapping() {
			return GetRuleContexts<SimpleMappingContext>();
		}
		public SimpleMappingContext simpleMapping(int i) {
			return GetRuleContext<SimpleMappingContext>(i);
		}
		public MappingListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mappingList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterMappingList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitMappingList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMappingList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MappingListContext mappingList() {
		MappingListContext _localctx = new MappingListContext(Context, State);
		EnterRule(_localctx, 14, RULE_mappingList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OBJECT_MEMBER_IDENTIFIER) {
				{
				State = 99;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					{
					State = 95; simpleMapping();
					State = 96; Match(T__2);
					}
					}
					break;
				case 2:
					{
					State = 98; complexMapping();
					}
					break;
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleMappingContext : ParserRuleContext {
		public SimpleMappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleMapping; } }
	 
		public SimpleMappingContext() { }
		public virtual void CopyFrom(SimpleMappingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringMappingWithOptionsContext : SimpleMappingContext {
		public ITerminalNode OBJECT_MEMBER_IDENTIFIER() { return GetToken(XmlConsumerParser.OBJECT_MEMBER_IDENTIFIER, 0); }
		public OptionsTupleContext optionsTuple() {
			return GetRuleContext<OptionsTupleContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(XmlConsumerParser.STRING_LITERAL, 0); }
		public StringMappingWithOptionsContext(SimpleMappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterStringMappingWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitStringMappingWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringMappingWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullMappingContext : SimpleMappingContext {
		public ITerminalNode OBJECT_MEMBER_IDENTIFIER() { return GetToken(XmlConsumerParser.OBJECT_MEMBER_IDENTIFIER, 0); }
		public NullMappingContext(SimpleMappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterNullMapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitNullMapping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullMapping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringMappingContext : SimpleMappingContext {
		public ITerminalNode OBJECT_MEMBER_IDENTIFIER() { return GetToken(XmlConsumerParser.OBJECT_MEMBER_IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(XmlConsumerParser.STRING_LITERAL, 0); }
		public StringMappingContext(SimpleMappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterStringMapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitStringMapping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringMapping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullMappingWithOptionsContext : SimpleMappingContext {
		public ITerminalNode OBJECT_MEMBER_IDENTIFIER() { return GetToken(XmlConsumerParser.OBJECT_MEMBER_IDENTIFIER, 0); }
		public OptionsTupleContext optionsTuple() {
			return GetRuleContext<OptionsTupleContext>(0);
		}
		public NullMappingWithOptionsContext(SimpleMappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterNullMappingWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitNullMappingWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullMappingWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleMappingContext simpleMapping() {
		SimpleMappingContext _localctx = new SimpleMappingContext(Context, State);
		EnterRule(_localctx, 16, RULE_simpleMapping);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new NullMappingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; Match(OBJECT_MEMBER_IDENTIFIER);
				State = 105; Match(T__4);
				State = 106; Match(T__17);
				}
				break;
			case 2:
				_localctx = new NullMappingWithOptionsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; Match(OBJECT_MEMBER_IDENTIFIER);
				State = 108; optionsTuple();
				State = 109; Match(T__4);
				State = 110; Match(T__17);
				}
				break;
			case 3:
				_localctx = new StringMappingContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; Match(OBJECT_MEMBER_IDENTIFIER);
				State = 113; Match(T__4);
				State = 114; Match(STRING_LITERAL);
				}
				break;
			case 4:
				_localctx = new StringMappingWithOptionsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 115; Match(OBJECT_MEMBER_IDENTIFIER);
				State = 116; optionsTuple();
				State = 117; Match(T__4);
				State = 118; Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexMappingContext : ParserRuleContext {
		public ComplexMappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexMapping; } }
	 
		public ComplexMappingContext() { }
		public virtual void CopyFrom(ComplexMappingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ObjectMappingContext : ComplexMappingContext {
		public ITerminalNode OBJECT_MEMBER_IDENTIFIER() { return GetToken(XmlConsumerParser.OBJECT_MEMBER_IDENTIFIER, 0); }
		public ObjectMappingBlockContext objectMappingBlock() {
			return GetRuleContext<ObjectMappingBlockContext>(0);
		}
		public ObjectMappingContext(ComplexMappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterObjectMapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitObjectMapping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectMapping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectMappingWithOptionsContext : ComplexMappingContext {
		public ITerminalNode OBJECT_MEMBER_IDENTIFIER() { return GetToken(XmlConsumerParser.OBJECT_MEMBER_IDENTIFIER, 0); }
		public OptionsTupleContext optionsTuple() {
			return GetRuleContext<OptionsTupleContext>(0);
		}
		public ObjectMappingBlockContext objectMappingBlock() {
			return GetRuleContext<ObjectMappingBlockContext>(0);
		}
		public ObjectMappingWithOptionsContext(ComplexMappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.EnterObjectMappingWithOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXmlConsumerListener typedListener = listener as IXmlConsumerListener;
			if (typedListener != null) typedListener.ExitObjectMappingWithOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXmlConsumerVisitor<TResult> typedVisitor = visitor as IXmlConsumerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectMappingWithOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexMappingContext complexMapping() {
		ComplexMappingContext _localctx = new ComplexMappingContext(Context, State);
		EnterRule(_localctx, 18, RULE_complexMapping);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new ObjectMappingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; Match(OBJECT_MEMBER_IDENTIFIER);
				State = 123; Match(T__4);
				State = 124; objectMappingBlock();
				}
				break;
			case 2:
				_localctx = new ObjectMappingWithOptionsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; Match(OBJECT_MEMBER_IDENTIFIER);
				State = 126; optionsTuple();
				State = 127; Match(T__4);
				State = 128; objectMappingBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', '\x87', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x5', '\x3', 
		'\x1B', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '&', '\n', '\x5', '\f', '\x5', '\xE', '\x5', ')', 
		'\v', '\x5', '\x3', '\x5', '\x5', '\x5', ',', '\n', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '/', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'Q', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'V', 
		'\n', '\a', '\f', '\a', '\xE', '\a', 'Y', '\v', '\a', '\x3', '\a', '\x5', 
		'\a', '\\', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\x66', '\n', '\t', '\f', '\t', '\xE', '\t', 'i', '\v', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '{', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x85', '\n', 
		'\v', '\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x2', '\x2', '\x91', '\x2', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x1E', '\x3', '\x2', '\x2', '\x2', '\b', '.', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'P', '\x3', '\x2', '\x2', '\x2', '\f', '[', '\x3', 
		'\x2', '\x2', '\x2', '\xE', ']', '\x3', '\x2', '\x2', '\x2', '\x10', 'g', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'z', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x5', '\x4', '\x3', 
		'\x2', '\x17', '\x18', '\a', '\x2', '\x2', '\x3', '\x18', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x1B', '\x5', '\x6', '\x4', '\x2', '\x1A', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x5', 
		'\xE', '\b', '\x2', '\x1D', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F', '\a', '\x3', '\x2', '\x2', '\x1F', ' ', '\x5', '\b', '\x5', '\x2', 
		' ', '!', '\a', '\x4', '\x2', '\x2', '!', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\'', '\x5', '\n', '\x6', '\x2', '#', '$', '\a', '\x5', '\x2', '\x2', 
		'$', '&', '\x5', '\n', '\x6', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', ',', '\a', '\x5', 
		'\x2', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', 
		'\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', '-', '/', '\x3', '\x2', 
		'\x2', '\x2', '.', '\"', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', 
		'\x2', '\x2', '\x2', '/', '\t', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\x6', '\x2', '\x2', '\x31', '\x32', '\a', '\a', '\x2', '\x2', '\x32', 
		'Q', '\a', '\x15', '\x2', '\x2', '\x33', '\x34', '\a', '\b', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\a', '\x2', '\x2', '\x35', 'Q', '\a', '\x15', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\t', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\a', '\x2', '\x2', '\x38', '\x39', '\a', '\x15', '\x2', '\x2', '\x39', 
		':', '\a', '\n', '\x2', '\x2', ':', 'Q', '\a', '\x15', '\x2', '\x2', ';', 
		'<', '\a', '\v', '\x2', '\x2', '<', '=', '\a', '\a', '\x2', '\x2', '=', 
		'Q', '\a', '\x15', '\x2', '\x2', '>', '?', '\a', '\f', '\x2', '\x2', '?', 
		'@', '\a', '\a', '\x2', '\x2', '@', 'Q', '\x5', '\f', '\a', '\x2', '\x41', 
		'\x42', '\a', '\r', '\x2', '\x2', '\x42', '\x43', '\a', '\a', '\x2', '\x2', 
		'\x43', 'Q', '\a', '\x15', '\x2', '\x2', '\x44', '\x45', '\a', '\xE', 
		'\x2', '\x2', '\x45', '\x46', '\a', '\a', '\x2', '\x2', '\x46', 'Q', '\a', 
		'\x15', '\x2', '\x2', 'G', 'H', '\a', '\xF', '\x2', '\x2', 'H', 'I', '\a', 
		'\a', '\x2', '\x2', 'I', 'Q', '\a', '\x15', '\x2', '\x2', 'J', 'K', '\a', 
		'\x10', '\x2', '\x2', 'K', 'L', '\a', '\a', '\x2', '\x2', 'L', 'Q', '\a', 
		'\x15', '\x2', '\x2', 'M', 'N', '\a', '\x11', '\x2', '\x2', 'N', 'O', 
		'\a', '\a', '\x2', '\x2', 'O', 'Q', '\a', '\x15', '\x2', '\x2', 'P', '\x30', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x33', '\x3', '\x2', '\x2', '\x2', 'P', 
		'\x36', '\x3', '\x2', '\x2', '\x2', 'P', ';', '\x3', '\x2', '\x2', '\x2', 
		'P', '>', '\x3', '\x2', '\x2', '\x2', 'P', '\x41', '\x3', '\x2', '\x2', 
		'\x2', 'P', '\x44', '\x3', '\x2', '\x2', '\x2', 'P', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'J', '\x3', '\x2', '\x2', '\x2', 'P', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'Q', '\v', '\x3', '\x2', '\x2', '\x2', 'R', 'W', '\a', '\x15', 
		'\x2', '\x2', 'S', 'T', '\a', '\n', '\x2', '\x2', 'T', 'V', '\a', '\x15', 
		'\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\\', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'R', 
		'\x3', '\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', 
		'\r', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x12', '\x2', '\x2', 
		'^', '_', '\x5', '\x10', '\t', '\x2', '_', '`', '\a', '\x13', '\x2', '\x2', 
		'`', '\xF', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x5', '\x12', 
		'\n', '\x2', '\x62', '\x63', '\a', '\x5', '\x2', '\x2', '\x63', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\x5', '\x14', '\v', '\x2', 
		'\x65', '\x61', '\x3', '\x2', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 
		'k', '\a', '\x16', '\x2', '\x2', 'k', 'l', '\a', '\a', '\x2', '\x2', 'l', 
		'{', '\a', '\x14', '\x2', '\x2', 'm', 'n', '\a', '\x16', '\x2', '\x2', 
		'n', 'o', '\x5', '\x6', '\x4', '\x2', 'o', 'p', '\a', '\a', '\x2', '\x2', 
		'p', 'q', '\a', '\x14', '\x2', '\x2', 'q', '{', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\a', '\x16', '\x2', '\x2', 's', 't', '\a', '\a', '\x2', '\x2', 
		't', '{', '\a', '\x15', '\x2', '\x2', 'u', 'v', '\a', '\x16', '\x2', '\x2', 
		'v', 'w', '\x5', '\x6', '\x4', '\x2', 'w', 'x', '\a', '\a', '\x2', '\x2', 
		'x', 'y', '\a', '\x15', '\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 
		'z', 'j', '\x3', '\x2', '\x2', '\x2', 'z', 'm', '\x3', '\x2', '\x2', '\x2', 
		'z', 'r', '\x3', '\x2', '\x2', '\x2', 'z', 'u', '\x3', '\x2', '\x2', '\x2', 
		'{', '\x13', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\x16', '\x2', 
		'\x2', '}', '~', '\a', '\a', '\x2', '\x2', '~', '\x85', '\x5', '\xE', 
		'\b', '\x2', '\x7F', '\x80', '\a', '\x16', '\x2', '\x2', '\x80', '\x81', 
		'\x5', '\x6', '\x4', '\x2', '\x81', '\x82', '\a', '\a', '\x2', '\x2', 
		'\x82', '\x83', '\x5', '\xE', '\b', '\x2', '\x83', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '|', '\x3', '\x2', '\x2', '\x2', '\x84', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\r', '\x1A', '\'', '+', '.', 'P', 'W', '[', '\x65', 'g', 'z', '\x84',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace OpCheck.XmlConsumer
